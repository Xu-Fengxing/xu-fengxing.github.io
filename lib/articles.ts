// 共享的文章数据
export interface Article {
  id: number
  title: string
  category: string
  tags: string[]
  date: string
  content: string
}

export interface BlogPost {
  id: number
  category: string
  title: string
  excerpt: string
  date: string
  readTime: string
}

// 生成文章链接的哈希值
export const generateArticleHash = (title: string) => {
  let hash = 0
  for (let i = 0; i < title.length; i++) {
    const char = title.charCodeAt(i)
    hash = ((hash << 5) - hash) + char
    hash = hash & hash // 转换为32位整数
  }
  
  // 36进制字符集：26个小写字母 + 10个数字
  const chars = 'abcdefghijklmnopqrstuvwxyz0123456789'
  let result = ''
  let num = Math.abs(hash)
  
  // 转换为4位36进制字符串
  for (let i = 0; i < 4; i++) {
    result = chars[num % 36] + result
    num = Math.floor(num / 36)
  }
  
  return result
}

// 文章数据
export const articles: Article[] = [
  {
    id: 1,
    title: "文章链接的生成原理",
    category: "科技",
    tags: ["技术", "算法", "哈希"],
    date: "2025年10月12日",
    content: `## 什么是文章链接？
每篇文章都有一个独特的链接，比如这篇文章的链接是：\`/p/${generateArticleHash("文章链接的生成原理")}\`
## 链接是怎么生成的？
### 第一步：把标题变成数字
就像给每个字母分配一个号码一样：
- 文 = 25991
- 章 = 31456
- 链 = 38142
- 接 = 25509
- 的 = 30340
- 生 = 29983
- 成 = 25104
- 原 = 21407
- 理 = 29702
### 第二步：计算哈希值
用一个特殊的数学公式把这些数字组合起来，得到一个很大的数字。这个公式确保：
- 相同的标题总是得到相同的数字
- 不同的标题得到不同的数字
### 第三步：转换成4位代码
把大数字转换成4位代码，只使用：
- 26个小写字母：a b c d e f g h i j k l m n o p q r s t u v w x y z
- 10个数字：0 1 2 3 4 5 6 7 8 9
就像把十进制数字转换成36进制一样！
## 为什么这样做？
1. **唯一性**：每篇文章都有独特的链接
2. **简洁性**：链接很短，只有4个字符
3. **友好性**：只包含字母和数字，适合在网址中使用
4. **一致性**：相同的标题总是生成相同的链接
## 实际例子
"文章链接的生成原理" → 哈希计算 → 36进制转换 → "${generateArticleHash("文章链接的生成原理")}"
所以这篇文章的完整链接就是：\`/p/${generateArticleHash("文章链接的生成原理")}\`
是不是很有趣？这就是现代网站生成文章链接的简单原理！`
  },
  {
    id: 2,
    title: "测试文章：完整结构示例",
    category: "教育",
    tags: ["测试", "示例", "结构"],
    date: "2025年1月19日",
    content: `## 第一章：基础概念
### 1.1 什么是基础概念
基础概念是学习任何知识的第一步，它为我们提供了理解更复杂内容的基础。
### 1.2 基础概念的重要性
掌握基础概念对于深入学习至关重要，它决定了我们能否正确理解后续内容。
### 1.3 如何学习基础概念
学习基础概念需要循序渐进，从简单到复杂，逐步建立知识体系。
### 1.4 基础概念的分类
基础概念可以分为理论概念、实践概念和应用概念三大类。
### 1.5 基础概念的应用
基础概念在实际应用中发挥着重要作用，是解决问题的关键。

## 第二章：进阶理论
### 2.1 进阶理论的定义
进阶理论是在基础概念之上发展起来的更深入的理论体系。
### 2.2 进阶理论的特点
进阶理论具有复杂性、系统性和创新性等特点。
### 2.3 进阶理论的发展
进阶理论随着科学技术的进步而不断发展完善。
### 2.4 进阶理论的应用领域
进阶理论广泛应用于各个学科领域，推动着学科的发展。
### 2.5 进阶理论的未来趋势
进阶理论将继续朝着更加精确、更加实用的方向发展。

## 第三章：实践应用
### 3.1 实践应用的意义
实践应用是将理论知识转化为实际成果的重要环节。
### 3.2 实践应用的方法
实践应用需要结合具体情况，采用合适的方法和策略。
### 3.3 实践应用的步骤
实践应用通常包括分析、设计、实施和评估等步骤。
### 3.4 实践应用的挑战
实践应用中会遇到各种挑战，需要灵活应对。
### 3.5 实践应用的效果评估
实践应用的效果需要通过科学的方法进行评估。

## 第四章：案例分析
### 4.1 案例选择的原则
选择案例需要考虑代表性、典型性和可操作性。
### 4.2 案例分析的步骤
案例分析包括案例描述、问题识别、原因分析和解决方案等步骤。
### 4.3 案例分析的技巧
案例分析需要运用逻辑思维和批判性思维。
### 4.4 案例分析的局限性
案例分析存在一定的局限性，需要结合其他方法。
### 4.5 案例分析的改进方向
案例分析需要不断改进，提高分析的准确性和有效性。

## 第五章：技术实现
### 5.1 技术选型的原则
技术选型需要考虑性能、成本、可维护性等因素。
### 5.2 技术实现的步骤
技术实现包括需求分析、架构设计、编码实现和测试部署等步骤。
### 5.3 技术实现的难点
技术实现中会遇到各种技术难点，需要深入研究。
### 5.4 技术实现的优化
技术实现需要不断优化，提高系统的性能和稳定性。
### 5.5 技术实现的维护
技术实现后需要进行持续的维护和升级。

## 第六章：性能优化
### 6.1 性能优化的目标
性能优化的目标是提高系统的响应速度和资源利用率。
### 6.2 性能优化的方法
性能优化可以采用多种方法，如算法优化、架构优化等。
### 6.3 性能优化的工具
性能优化需要使用专业的工具进行监控和分析。
### 6.4 性能优化的指标
性能优化需要建立科学的指标体系。
### 6.5 性能优化的效果
性能优化需要持续监控效果，确保达到预期目标。

## 第七章：安全防护
### 7.1 安全威胁的类型
安全威胁包括外部攻击、内部泄露、系统漏洞等多种类型。
### 7.2 安全防护的策略
安全防护需要采用多层次、全方位的防护策略。
### 7.3 安全防护的技术
安全防护技术包括加密、认证、授权等多种技术手段。
### 7.4 安全防护的流程
安全防护需要建立完善的安全管理流程。
### 7.5 安全防护的评估
安全防护效果需要定期进行评估和改进。

## 第八章：质量保证
### 8.1 质量保证的重要性
质量保证是确保产品质量的关键环节。
### 8.2 质量保证的方法
质量保证可以采用测试、审查、验证等多种方法。
### 8.3 质量保证的标准
质量保证需要建立科学的质量标准体系。
### 8.4 质量保证的流程
质量保证需要建立规范的质量管理流程。
### 8.5 质量保证的改进
质量保证需要持续改进，不断提高质量水平。

## 第九章：项目管理
### 9.1 项目管理的目标
项目管理的目标是确保项目按时、按质、按预算完成。
### 9.2 项目管理的方法
项目管理可以采用敏捷、瀑布等多种方法。
### 9.3 项目管理的工具
项目管理需要使用专业的项目管理工具。
### 9.4 项目管理的风险
项目管理中会遇到各种风险，需要及时识别和应对。
### 9.5 项目管理的成功因素
项目管理的成功需要团队协作、沟通协调等多种因素。

## 第十章：总结展望
### 10.1 主要内容回顾
本章回顾了前面各章的主要内容，总结了核心观点。
### 10.2 重要发现总结
总结了在研究过程中的重要发现和认识。
### 10.3 存在的不足
分析了当前研究中存在的不足和局限性。
### 10.4 未来发展方向
展望了未来的发展方向和研究重点。
### 10.5 实践建议
提出了在实际应用中的建议和注意事项。`
  }
]

// 清理Markdown格式，转换为纯文本
const cleanMarkdown = (text: string): string => {
  return text
    .replace(/^#{1,6}\s+/gm, '') // 移除标题标记
    .replace(/\*\*(.*?)\*\*/g, '$1') // 移除粗体标记
    .replace(/\*(.*?)\*/g, '$1') // 移除斜体标记
    .replace(/`(.*?)`/g, '$1') // 移除代码标记
    .replace(/^\s*[-*+]\s+/gm, '• ') // 转换列表标记
    .replace(/^\s*\d+\.\s+/gm, '') // 移除有序列表标记
    .replace(/\n+/g, ' ') // 将多个换行符替换为空格
    .trim()
}

// 从文章内容中提取摘要
const extractExcerpt = (content: string, maxLength: number = 100): string => {
  const cleaned = cleanMarkdown(content)
  return cleaned.length > maxLength ? cleaned.substring(0, maxLength) + '...' : cleaned
}

// 将文章转换为博客文章格式（用于首页显示）
export const getBlogPosts = (): BlogPost[] => {
  return articles.map(article => ({
    id: article.id,
    category: article.category,
    title: article.title,
    excerpt: extractExcerpt(article.content),
    date: article.date,
    readTime: "3 分钟" // 可以根据内容长度计算
  }))
}

// 获取最新文章（按日期排序）
export const getLatestArticles = (count: number = 6): BlogPost[] => {
  const blogPosts = getBlogPosts()
  return blogPosts.slice(0, count)
}
